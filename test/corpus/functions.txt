==================
Func panic
==================

access(all)
fun f() {
    panic("This is a panic")
}

-----

    (Program
      (FunctionDeclaration
        (Access
          (Entitlements
            (EntitlementIdentifier)))
        (Identifier)
        (Block
          (ExpressionStatement
            (SpecialFunctionExpression
              (SpecialFunctionIdentifier)
              (Argument
                (StringExpression
                  (StringLiteral))))))))

==================
Func access mapping
==================

access(mapping Identity)
fun f() {}

-----

    (Program
      (FunctionDeclaration
        (Access
          (Entitlements
            (EntitlementIdentifier)))
        (Identifier)))


==================
While cast
==================

access(all)
fun f() {
    while boundaryIndex < UInt64(2) {
        boundaryIndex = boundaryIndex + 1
    }
}

-----

    (Program
      (FunctionDeclaration
        (Access
          (Entitlements
            (EntitlementIdentifier)))
        (Identifier)
        (Block
          (WhileStatement
            (BinaryExpressionRelational
              (IdentifierExpression
                (Identifier))
              (RelationalOP
                (Less))
              (CastExpression
                (NominalType
                  (TypeIdentifier
                    (TypeBuiltin)))
                (Argument
                  (IntegerExpression
                    (IntegerLiteral)))))
            (Block
              (AssignmentStatement
                (IdentifierExpression
                  (Identifier))
                (Transfer
                  (TransferOperationCopy))
                (AdditiveExpression
                  (IdentifierExpression
                    (Identifier))
                  (AdditiveOp
                    (Plus))
                  (IntegerExpression
                    (IntegerLiteral)))))))))


==================
Force cast generic
==================

access(all)
fun f() {
   let tokenManagerCapability = tokenManagerCapabilityController.capability as! Capability<auth(FungibleToken.Withdraw) &LockedTokens.LockedTokenManager>
}

-----

    (Program
      (FunctionDeclaration
        (Access
          (Entitlements
            (EntitlementIdentifier)))
        (Identifier)
        (Block
          (VariableDeclaration
            (VariableKind)
            (Identifier)
            (Transfer
              (TransferOperationCopy))
            (CastingExpression
              (MemberExpression
                (IdentifierExpression
                  (Identifier))
                (Identifier))
              (ForceCasting)
              (InstantiationType
                (NominalType
                  (TypeIdentifier))
                (AuthorizedType
                  (Entitlements
                    (EntitlementQualifiedIdentifier
                      (TypeIdentifier)
                      (EntitlementIdentifier)))
                  (ReferenceType
                    (NominalType
                      (TypeIdentifier)
                      (TypeIdentifier))))))))))
